global _ft_strcmp

section .text

_ft_strcmp:
	push	rdi
	push	rsi
	xor		rbx, rbx
lp:
	cmp 	[rdi], bl		; сравни первый бит первого аргумента с концом стр.
	jz		the_end			; если это конец строки, перейди на метку выхода
	cmpsb					; сравни бит первого аргумента с битом второго арг.
	jz		lp				; и перейди к следующему биту. Если равны, сравни-
	xor		rax, rax		; вай дальше. Иначе обнули возвращаемый регистр,
	mov		al, [rdi - 1]	; запиши в младший байт возвращаемого регистра пер-
	mov		bl, [rsi - 1]	; вый отличающийся символ первого аргумента. Сделай
	sub		rax, rbx		; то же самое для второго аргумента, но в регистр
	pop		rsi				; bl. Вычти из возвращаемого регистра регистр с
	pop		rdi				; символом второго аргумента. Верни 
ret
the_end:					
	xor		rax, rax		; обнули возвращаемый регистр
	mov 	al, [rdi]		; запиши в регистр al символ из предыдущего бита
	mov 	bl, [rsi]		; первого аргумента, а в регистр bl - второго арг.
	sub 	rax, rbx		; вычти из возвращаемого регистра регистр с символ.
	pop 	rsi				; второго аргумента, запиши результат в возвр. рег.
	pop 	rdi
ret
